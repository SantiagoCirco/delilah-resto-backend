swagger: "2.0"
info:
  description: "La API de Delilah-Rest贸 tiene todo lo necesario para gestionar los pedidos, usuarios y productos de la aplicaci贸n."
  version: "1.0.0"
  title: "Delilah - Rest贸  API"
host: "delilah.resto"
basePath: "/v1"
tags:
- name: "products"
  description: "Everything about the products available in Delilah-Rest贸"
- name: "orders"
  description: "Access to Petstore orders"
- name: "users"
  description: "Operations about user"
schemes:
- "https"
paths:
  /products:
    post:
      tags:
      - "products"
      summary: "Add a new product to the store. Only admin users."
      description: ""
      operationId: "addProduct"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "405":
          description: "Invalid input"
      security:
      - delilah_auth:
        - "write:products"
        - "read:products"
    get:
      tags:
      - "products"
      summary: "return all the products of the store."
      operationId: "getProducts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"
        "404":
          description: "Products not found"
  /products/{id}:
    get:
      tags:
      - "products"
      summary: "Find product by ID"
      description: "Returns a single product"
      operationId: "getProductById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of product to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Product not found"
      security:
      - api_key: []
    put:
      tags:
      - "products"
      summary: "Update an existing product"
      operationId: "updateProduct"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "Product id to be updated"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Product not found"
        "405":
          description: "Validation exception"
      security:
      - delilah_auth:
        - "write:products"
        - "read:products"  
    delete:
      tags:
      - "products"
      summary: "Deletes a product"
      operationId: "deleteProduct"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "Product id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Product not found"
      security:
      - delilah_auth:
        - "write:products"
        - "read:products"
  /orders:
    get:
      tags:
      - "orders"
      summary: "return all the orders of the store."
      operationId: "getOrders"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "404":
          description: "Orders not found"
    post:
      tags:
      - "orders"
      summary: "Place an order from the user of one or more products"
      operationId: "placeOrder"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the products"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid Order"
  /orders/{id}:
    get:
      tags:
      - "orders"
      summary: "Find accepted order by ID"
      operationId: "getOrderById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of order that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
    delete:
      tags:
      - "orders"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
    put:
      tags:
      - "orders"
      summary: "Update an existing order"
      operationId: "updateOrder"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "Order id to be updated"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
        "405":
          description: "Validation exception"
      security:
      - delilah_auth:
        - "write:orders"
        - "read:orders"  
  /users:
    post:
      tags:
      - "users"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /users/login:
    get:
      tags:
      - "users"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /users/{username}:
    get:
      tags:
      - "users"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "users"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "users"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
securityDefinitions:
  delilah_auth:
    type: "oauth2"
    authorizationUrl: "http://delilah.resto.com.ar/oauth/dialog"
    flow: "implicit"
    scopes:
      write:products: "modify products in your account"
      read:products: "read products pets"
      write:orders: "modify orders in your account"
      read:orders: "read orders pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      date:
        type: "string"
        format: "date-time"
      price:
        type: "integer"
        format: "int64"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "delivered"
        - "canceled"
        - "delivering"
        - "preparing"
        - "accepted"
        - "placed"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      fullName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      adress:
        type: "string"
        description: "User home adress."
      admin:
        type: "integer"
        format: "int1"   
  Product:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "cheddar burguer"
      image:
        type: "string"
        description: "A valid Image's Url"
      price:
        type: "integer"
        format: "int64"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"